// <auto-generated />
using System;
using VictorFrye.Coldfire.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace VictorFrye.Coldfire.Data.Migrations
{
    [DbContext(typeof(ColdfireDbContext))]
    [Migration("20230228232048_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("BookEntityCharacterEntity", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharactersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BooksId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("BookCharacters", (string)null);
                });

            modelBuilder.Entity("BookEntityCharacterEntity1", b =>
                {
                    b.Property<int>("PovBooksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PovCharactersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PovBooksId", "PovCharactersId");

                    b.HasIndex("PovCharactersId");

                    b.ToTable("BookPovCharacters", (string)null);
                });

            modelBuilder.Entity("CharacterEntityHouseEntity", b =>
                {
                    b.Property<int>("AllegiancesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SwornMembersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AllegiancesId", "SwornMembersId");

                    b.HasIndex("SwornMembersId");

                    b.ToTable("HouseSwornMembers", (string)null);
                });

            modelBuilder.Entity("Coldfire.Data.Books.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Released")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Coldfire.Data.Characters.CharacterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Born")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CharacterFatherForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterMotherForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterSpouseForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Culture")
                        .HasColumnType("TEXT");

                    b.Property<string>("Died")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TvSeries")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterFatherForeignKey");

                    b.HasIndex("CharacterMotherForeignKey");

                    b.HasIndex("CharacterSpouseForeignKey");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Coldfire.Data.Houses.HouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AncestralWeapons")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoatOfArms")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiedOut")
                        .HasColumnType("TEXT");

                    b.Property<string>("Founded")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HouseCurrentLordForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseFounderForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseHeirForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseOverlordForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("Seats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Words")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HouseCurrentLordForeignKey");

                    b.HasIndex("HouseFounderForeignKey");

                    b.HasIndex("HouseHeirForeignKey");

                    b.HasIndex("HouseOverlordForeignKey");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("HouseEntityHouseEntity", b =>
                {
                    b.Property<int>("CadetBranchesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CadetBranchesId", "HouseEntityId");

                    b.HasIndex("HouseEntityId");

                    b.ToTable("HouseCadetBranches", (string)null);
                });

            modelBuilder.Entity("BookEntityCharacterEntity", b =>
                {
                    b.HasOne("Coldfire.Data.Books.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookEntityCharacterEntity1", b =>
                {
                    b.HasOne("Coldfire.Data.Books.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("PovBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("PovCharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterEntityHouseEntity", b =>
                {
                    b.HasOne("Coldfire.Data.Houses.HouseEntity", null)
                        .WithMany()
                        .HasForeignKey("AllegiancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("SwornMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coldfire.Data.Characters.CharacterEntity", b =>
                {
                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", "Father")
                        .WithMany()
                        .HasForeignKey("CharacterFatherForeignKey");

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", "Mother")
                        .WithMany()
                        .HasForeignKey("CharacterMotherForeignKey");

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", "Spouse")
                        .WithMany()
                        .HasForeignKey("CharacterSpouseForeignKey");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("Coldfire.Data.Houses.HouseEntity", b =>
                {
                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", "CurrentLord")
                        .WithMany()
                        .HasForeignKey("HouseCurrentLordForeignKey");

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", "Founder")
                        .WithMany()
                        .HasForeignKey("HouseFounderForeignKey");

                    b.HasOne("Coldfire.Data.Characters.CharacterEntity", "Heir")
                        .WithMany()
                        .HasForeignKey("HouseHeirForeignKey");

                    b.HasOne("Coldfire.Data.Houses.HouseEntity", "Overlord")
                        .WithMany()
                        .HasForeignKey("HouseOverlordForeignKey");

                    b.Navigation("CurrentLord");

                    b.Navigation("Founder");

                    b.Navigation("Heir");

                    b.Navigation("Overlord");
                });

            modelBuilder.Entity("HouseEntityHouseEntity", b =>
                {
                    b.HasOne("Coldfire.Data.Houses.HouseEntity", null)
                        .WithMany()
                        .HasForeignKey("CadetBranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coldfire.Data.Houses.HouseEntity", null)
                        .WithMany()
                        .HasForeignKey("HouseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
