// <auto-generated />
using System;
using ColdfireApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ColdfireApi.Migrations
{
    [DbContext(typeof(ColdfireDbContext))]
    [Migration("20230227220337_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("BookCharacter", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharactersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BooksId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("BookCharacters", (string)null);
                });

            modelBuilder.Entity("BookCharacter1", b =>
                {
                    b.Property<int>("PovBooksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PovCharactersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PovBooksId", "PovCharactersId");

                    b.HasIndex("PovCharactersId");

                    b.ToTable("BookPovCharacters", (string)null);
                });

            modelBuilder.Entity("CharacterHouse", b =>
                {
                    b.Property<int>("AllegiancesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SwornMembersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AllegiancesId", "SwornMembersId");

                    b.HasIndex("SwornMembersId");

                    b.ToTable("HouseSwornMembers", (string)null);
                });

            modelBuilder.Entity("ColdfireApi.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Released")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ColdfireApi.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Born")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CharacterFatherForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterMotherForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterSpouseForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Culture")
                        .HasColumnType("TEXT");

                    b.Property<string>("Died")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TvSeries")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterFatherForeignKey");

                    b.HasIndex("CharacterMotherForeignKey");

                    b.HasIndex("CharacterSpouseForeignKey");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 583,
                            Aliases = "Lord Snow;Ned Stark's Bastard;The Snow of Winterfell;The Crow-Come-Over;The 998th Lord Commander of the Night's Watch;The Bastard of Winterfell;The Black Bastard of the Wall;Lord Crow",
                            Born = "In 283 AC",
                            Culture = "Northmen",
                            Gender = "Male",
                            Name = "Jon Snow",
                            PlayedBy = "Kit Harington",
                            Titles = "Lord Commander of the Night's Watch",
                            TvSeries = "Season 1;Season 2;Season 3;Season 4;Season 5;Season 6"
                        });
                });

            modelBuilder.Entity("ColdfireApi.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AncestralWeapons")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoatOfArms")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiedOut")
                        .HasColumnType("TEXT");

                    b.Property<string>("Founded")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HouseCurrentLordForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseFounderForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseHeirForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseOverlordForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("Seats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Words")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HouseCurrentLordForeignKey");

                    b.HasIndex("HouseFounderForeignKey");

                    b.HasIndex("HouseHeirForeignKey");

                    b.HasIndex("HouseOverlordForeignKey");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("HouseHouse", b =>
                {
                    b.Property<int>("CadetBranchesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CadetBranchesId", "HouseId");

                    b.HasIndex("HouseId");

                    b.ToTable("HouseCadetBranches", (string)null);
                });

            modelBuilder.Entity("BookCharacter", b =>
                {
                    b.HasOne("ColdfireApi.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColdfireApi.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCharacter1", b =>
                {
                    b.HasOne("ColdfireApi.Book", null)
                        .WithMany()
                        .HasForeignKey("PovBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColdfireApi.Character", null)
                        .WithMany()
                        .HasForeignKey("PovCharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterHouse", b =>
                {
                    b.HasOne("ColdfireApi.House", null)
                        .WithMany()
                        .HasForeignKey("AllegiancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColdfireApi.Character", null)
                        .WithMany()
                        .HasForeignKey("SwornMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColdfireApi.Character", b =>
                {
                    b.HasOne("ColdfireApi.Character", "Father")
                        .WithMany()
                        .HasForeignKey("CharacterFatherForeignKey");

                    b.HasOne("ColdfireApi.Character", "Mother")
                        .WithMany()
                        .HasForeignKey("CharacterMotherForeignKey");

                    b.HasOne("ColdfireApi.Character", "Spouse")
                        .WithMany()
                        .HasForeignKey("CharacterSpouseForeignKey");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("ColdfireApi.House", b =>
                {
                    b.HasOne("ColdfireApi.Character", "CurrentLord")
                        .WithMany()
                        .HasForeignKey("HouseCurrentLordForeignKey");

                    b.HasOne("ColdfireApi.Character", "Founder")
                        .WithMany()
                        .HasForeignKey("HouseFounderForeignKey");

                    b.HasOne("ColdfireApi.Character", "Heir")
                        .WithMany()
                        .HasForeignKey("HouseHeirForeignKey");

                    b.HasOne("ColdfireApi.House", "Overlord")
                        .WithMany()
                        .HasForeignKey("HouseOverlordForeignKey");

                    b.Navigation("CurrentLord");

                    b.Navigation("Founder");

                    b.Navigation("Heir");

                    b.Navigation("Overlord");
                });

            modelBuilder.Entity("HouseHouse", b =>
                {
                    b.HasOne("ColdfireApi.House", null)
                        .WithMany()
                        .HasForeignKey("CadetBranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColdfireApi.House", null)
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
